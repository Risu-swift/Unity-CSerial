/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_cserialportCSharp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_cserialportCSharp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_cserialportCSharp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "CSerialPort/SerialPort_global.h"
#include "CSerialPort/SerialPort.h"
#include "CSerialPort/SerialPortListener.h"
#include "CSerialPort/SerialPortInfo.h"


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< itas109::SerialPortInfo > *new_std_vector_Sl_itas109_SerialPortInfo_Sg___SWIG_2(int capacity){
        std::vector< itas109::SerialPortInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< itas109::SerialPortInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN itas109::SerialPortInfo std_vector_Sl_itas109_SerialPortInfo_Sg__getitemcopy(std::vector< itas109::SerialPortInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< itas109::SerialPortInfo >::value_type const &std_vector_Sl_itas109_SerialPortInfo_Sg__getitem(std::vector< itas109::SerialPortInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_itas109_SerialPortInfo_Sg__setitem(std::vector< itas109::SerialPortInfo > *self,int index,itas109::SerialPortInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_itas109_SerialPortInfo_Sg__AddRange(std::vector< itas109::SerialPortInfo > *self,std::vector< itas109::SerialPortInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< itas109::SerialPortInfo > *std_vector_Sl_itas109_SerialPortInfo_Sg__GetRange(std::vector< itas109::SerialPortInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< itas109::SerialPortInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_itas109_SerialPortInfo_Sg__Insert(std::vector< itas109::SerialPortInfo > *self,int index,itas109::SerialPortInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_itas109_SerialPortInfo_Sg__InsertRange(std::vector< itas109::SerialPortInfo > *self,int index,std::vector< itas109::SerialPortInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_itas109_SerialPortInfo_Sg__RemoveAt(std::vector< itas109::SerialPortInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_itas109_SerialPortInfo_Sg__RemoveRange(std::vector< itas109::SerialPortInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< itas109::SerialPortInfo > *std_vector_Sl_itas109_SerialPortInfo_Sg__Repeat(itas109::SerialPortInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< itas109::SerialPortInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_itas109_SerialPortInfo_Sg__Reverse__SWIG_0(std::vector< itas109::SerialPortInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_itas109_SerialPortInfo_Sg__Reverse__SWIG_1(std::vector< itas109::SerialPortInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_itas109_SerialPortInfo_Sg__SetRange(std::vector< itas109::SerialPortInfo > *self,int index,std::vector< itas109::SerialPortInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#include <string.h>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "cserialportCSHARP_wrap.h"

SwigDirector_CSerialPortListener::SwigDirector_CSerialPortListener() : itas109::CSerialPortListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_CSerialPortListener::~SwigDirector_CSerialPortListener() {
  
}


void SwigDirector_CSerialPortListener::onReadEvent(char const *portName,unsigned int readBufferLen) {
  char * jportName = 0 ;
  unsigned int jreadBufferLen  ;
  
  if (!swig_callbackonReadEvent) {
    Swig::DirectorPureVirtualException::raise("itas109::CSerialPortListener::onReadEvent");
    return;
  } else {
    jportName = SWIG_csharp_string_callback((const char *)portName); 
    jreadBufferLen = (unsigned int)readBufferLen;
    swig_callbackonReadEvent(jportName, jreadBufferLen);
  }
}

void SwigDirector_CSerialPortListener::swig_connect_director(SWIG_Callback0_t callbackonReadEvent) {
  swig_callbackonReadEvent = callbackonReadEvent;
}

void SwigDirector_CSerialPortListener::swig_init_callbacks() {
  swig_callbackonReadEvent = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_new_SerialPortInfoVector__SWIG_0() {
  void * jresult ;
  std::vector< itas109::SerialPortInfo > *result = 0 ;
  
  result = (std::vector< itas109::SerialPortInfo > *)new std::vector< itas109::SerialPortInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_new_SerialPortInfoVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< itas109::SerialPortInfo > *arg1 = 0 ;
  std::vector< itas109::SerialPortInfo > *result = 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< itas109::SerialPortInfo > const & is null", 0);
    return 0;
  } 
  result = (std::vector< itas109::SerialPortInfo > *)new std::vector< itas109::SerialPortInfo >((std::vector< itas109::SerialPortInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_Clear(void * jarg1) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_Add(void * jarg1, void * jarg2) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  itas109::SerialPortInfo *arg2 = 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (itas109::SerialPortInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "itas109::SerialPortInfo const & is null", 0);
    return ;
  } 
  (arg1)->push_back((itas109::SerialPortInfo const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  std::vector< itas109::SerialPortInfo >::size_type result;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  result = ((std::vector< itas109::SerialPortInfo > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  bool result;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  result = (bool)((std::vector< itas109::SerialPortInfo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  std::vector< itas109::SerialPortInfo >::size_type result;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  result = ((std::vector< itas109::SerialPortInfo > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  std::vector< itas109::SerialPortInfo >::size_type arg2 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (std::vector< itas109::SerialPortInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_new_SerialPortInfoVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< itas109::SerialPortInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< itas109::SerialPortInfo > *)new_std_vector_Sl_itas109_SerialPortInfo_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  itas109::SerialPortInfo result;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_itas109_SerialPortInfo_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new itas109::SerialPortInfo(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  std::vector< itas109::SerialPortInfo >::value_type *result = 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< itas109::SerialPortInfo >::value_type *) &std_vector_Sl_itas109_SerialPortInfo_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  itas109::SerialPortInfo *arg3 = 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (itas109::SerialPortInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "itas109::SerialPortInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_itas109_SerialPortInfo_Sg__setitem(arg1,arg2,(itas109::SerialPortInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  std::vector< itas109::SerialPortInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (std::vector< itas109::SerialPortInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< itas109::SerialPortInfo > const & is null", 0);
    return ;
  } 
  std_vector_Sl_itas109_SerialPortInfo_Sg__AddRange(arg1,(std::vector< itas109::SerialPortInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< itas109::SerialPortInfo > *result = 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< itas109::SerialPortInfo > *)std_vector_Sl_itas109_SerialPortInfo_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  itas109::SerialPortInfo *arg3 = 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (itas109::SerialPortInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "itas109::SerialPortInfo const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_itas109_SerialPortInfo_Sg__Insert(arg1,arg2,(itas109::SerialPortInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  std::vector< itas109::SerialPortInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< itas109::SerialPortInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< itas109::SerialPortInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_itas109_SerialPortInfo_Sg__InsertRange(arg1,arg2,(std::vector< itas109::SerialPortInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_itas109_SerialPortInfo_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_itas109_SerialPortInfo_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  itas109::SerialPortInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< itas109::SerialPortInfo > *result = 0 ;
  
  arg1 = (itas109::SerialPortInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "itas109::SerialPortInfo const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< itas109::SerialPortInfo > *)std_vector_Sl_itas109_SerialPortInfo_Sg__Repeat((itas109::SerialPortInfo const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  std_vector_Sl_itas109_SerialPortInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_itas109_SerialPortInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfoVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  int arg2 ;
  std::vector< itas109::SerialPortInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< itas109::SerialPortInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< itas109::SerialPortInfo > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_itas109_SerialPortInfo_Sg__SetRange(arg1,arg2,(std::vector< itas109::SerialPortInfo > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_delete_SerialPortInfoVector(void * jarg1) {
  std::vector< itas109::SerialPortInfo > *arg1 = (std::vector< itas109::SerialPortInfo > *) 0 ;
  
  arg1 = (std::vector< itas109::SerialPortInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfo_portName_set(void * jarg1, char * jarg2) {
  itas109::SerialPortInfo *arg1 = (itas109::SerialPortInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (itas109::SerialPortInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->portName, (const char *)arg2, 256-1);
      arg1->portName[256-1] = 0;
    } else {
      arg1->portName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_itas109_SerialPortInfo_portName_get(void * jarg1) {
  char * jresult ;
  itas109::SerialPortInfo *arg1 = (itas109::SerialPortInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (itas109::SerialPortInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->portName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfo_description_set(void * jarg1, char * jarg2) {
  itas109::SerialPortInfo *arg1 = (itas109::SerialPortInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (itas109::SerialPortInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->description, (const char *)arg2, 256-1);
      arg1->description[256-1] = 0;
    } else {
      arg1->description[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_itas109_SerialPortInfo_description_get(void * jarg1) {
  char * jresult ;
  itas109::SerialPortInfo *arg1 = (itas109::SerialPortInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (itas109::SerialPortInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->description);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_SerialPortInfo_hardwareId_set(void * jarg1, char * jarg2) {
  itas109::SerialPortInfo *arg1 = (itas109::SerialPortInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (itas109::SerialPortInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->hardwareId, (const char *)arg2, 256-1);
      arg1->hardwareId[256-1] = 0;
    } else {
      arg1->hardwareId[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_itas109_SerialPortInfo_hardwareId_get(void * jarg1) {
  char * jresult ;
  itas109::SerialPortInfo *arg1 = (itas109::SerialPortInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (itas109::SerialPortInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->hardwareId);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_new_SerialPortInfo() {
  void * jresult ;
  itas109::SerialPortInfo *result = 0 ;
  
  result = (itas109::SerialPortInfo *)new itas109::SerialPortInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_delete_SerialPortInfo(void * jarg1) {
  itas109::SerialPortInfo *arg1 = (itas109::SerialPortInfo *) 0 ;
  
  arg1 = (itas109::SerialPortInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_new_CSerialPort__SWIG_0() {
  void * jresult ;
  itas109::CSerialPort *result = 0 ;
  
  result = (itas109::CSerialPort *)new itas109::CSerialPort();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_new_CSerialPort__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  itas109::CSerialPort *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (itas109::CSerialPort *)new itas109::CSerialPort((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_delete_CSerialPort(void * jarg1) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_init__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, unsigned int jarg8) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  itas109::Parity arg4 ;
  itas109::DataBits arg5 ;
  itas109::StopBits arg6 ;
  itas109::FlowControl arg7 ;
  unsigned int arg8 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (itas109::Parity)jarg4; 
  arg5 = (itas109::DataBits)jarg5; 
  arg6 = (itas109::StopBits)jarg6; 
  arg7 = (itas109::FlowControl)jarg7; 
  arg8 = (unsigned int)jarg8; 
  (arg1)->init((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_init__SWIG_1(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  itas109::Parity arg4 ;
  itas109::DataBits arg5 ;
  itas109::StopBits arg6 ;
  itas109::FlowControl arg7 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (itas109::Parity)jarg4; 
  arg5 = (itas109::DataBits)jarg5; 
  arg6 = (itas109::StopBits)jarg6; 
  arg7 = (itas109::FlowControl)jarg7; 
  (arg1)->init((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_init__SWIG_2(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  itas109::Parity arg4 ;
  itas109::DataBits arg5 ;
  itas109::StopBits arg6 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (itas109::Parity)jarg4; 
  arg5 = (itas109::DataBits)jarg5; 
  arg6 = (itas109::StopBits)jarg6; 
  (arg1)->init((char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_init__SWIG_3(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  itas109::Parity arg4 ;
  itas109::DataBits arg5 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (itas109::Parity)jarg4; 
  arg5 = (itas109::DataBits)jarg5; 
  (arg1)->init((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_init__SWIG_4(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  itas109::Parity arg4 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (itas109::Parity)jarg4; 
  (arg1)->init((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_init__SWIG_5(void * jarg1, char * jarg2, int jarg3) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->init((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_init__SWIG_6(void * jarg1, char * jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->init((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setOperateMode__SWIG_0(void * jarg1, int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::OperateMode arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (itas109::OperateMode)jarg2; 
  (arg1)->setOperateMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setOperateMode__SWIG_1(void * jarg1) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  (arg1)->setOperateMode();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_CSerialPort_open(void * jarg1) {
  unsigned int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  bool result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (bool)(arg1)->open();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_close(void * jarg1) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_CSerialPort_isOpen(void * jarg1) {
  unsigned int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  bool result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (bool)(arg1)->isOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_connectReadEvent(void * jarg1, void * jarg2) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::CSerialPortListener *arg2 = (itas109::CSerialPortListener *) 0 ;
  int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (itas109::CSerialPortListener *)jarg2; 
  result = (int)(arg1)->connectReadEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_disconnectReadEvent(void * jarg1) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (int)(arg1)->disconnectReadEvent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_CSerialPort_getReadBufferUsedLen(void * jarg1) {
  unsigned int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  unsigned int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (unsigned int)(arg1)->getReadBufferUsedLen();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_readData(void * jarg1, unsigned char* jarg2, int jarg3) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  result = (int)(arg1)->readData(arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_readAllData(void * jarg1, unsigned char* jarg2) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = jarg2;
  result = (int)(arg1)->readAllData(arg2);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_readLineData(void * jarg1, unsigned char* jarg2, int jarg3) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  result = (int)(arg1)->readLineData(arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_writeData(void * jarg1, unsigned char* jarg2, int jarg3) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  result = (int)(arg1)->writeData((void const *)arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setDebugModel(void * jarg1, unsigned int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  bool arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDebugModel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setReadIntervalTimeout(void * jarg1, unsigned int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setReadIntervalTimeout(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_CSerialPort_getReadIntervalTimeout(void * jarg1) {
  unsigned int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  unsigned int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (unsigned int)(arg1)->getReadIntervalTimeout();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setMinByteReadNotify__SWIG_0(void * jarg1, unsigned int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setMinByteReadNotify(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setMinByteReadNotify__SWIG_1(void * jarg1) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  (arg1)->setMinByteReadNotify();
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setByteReadBufferFullNotify(void * jarg1, unsigned int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setByteReadBufferFullNotify(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_CSerialPort_flushBuffers(void * jarg1) {
  unsigned int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  bool result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (bool)(arg1)->flushBuffers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_CSerialPort_flushReadBuffers(void * jarg1) {
  unsigned int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  bool result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (bool)(arg1)->flushReadBuffers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_CSerialPort_flushWriteBuffers(void * jarg1) {
  unsigned int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  bool result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (bool)(arg1)->flushWriteBuffers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_getLastError(void * jarg1) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (int)((itas109::CSerialPort const *)arg1)->getLastError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_itas109_CSerialPort_getLastErrorMsg(void * jarg1) {
  char * jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *result = 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (char *)((itas109::CSerialPort const *)arg1)->getLastErrorMsg();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_clearError(void * jarg1) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  (arg1)->clearError();
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setPortName(void * jarg1, char * jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setPortName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_itas109_CSerialPort_getPortName(void * jarg1) {
  char * jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *result = 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (char *)((itas109::CSerialPort const *)arg1)->getPortName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setBaudRate(void * jarg1, int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  int arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBaudRate(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_getBaudRate(void * jarg1) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (int)((itas109::CSerialPort const *)arg1)->getBaudRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setParity(void * jarg1, int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::Parity arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (itas109::Parity)jarg2; 
  (arg1)->setParity(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_getParity(void * jarg1) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::Parity result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (itas109::Parity)((itas109::CSerialPort const *)arg1)->getParity();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setDataBits(void * jarg1, int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::DataBits arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (itas109::DataBits)jarg2; 
  (arg1)->setDataBits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_getDataBits(void * jarg1) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::DataBits result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (itas109::DataBits)((itas109::CSerialPort const *)arg1)->getDataBits();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setStopBits(void * jarg1, int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::StopBits arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (itas109::StopBits)jarg2; 
  (arg1)->setStopBits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_getStopBits(void * jarg1) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::StopBits result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (itas109::StopBits)((itas109::CSerialPort const *)arg1)->getStopBits();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setFlowControl(void * jarg1, int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::FlowControl arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (itas109::FlowControl)jarg2; 
  (arg1)->setFlowControl(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_itas109_CSerialPort_getFlowControl(void * jarg1) {
  int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  itas109::FlowControl result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (itas109::FlowControl)((itas109::CSerialPort const *)arg1)->getFlowControl();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setReadBufferSize(void * jarg1, unsigned int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setReadBufferSize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_itas109_CSerialPort_getReadBufferSize(void * jarg1) {
  unsigned int jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  unsigned int result;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (unsigned int)((itas109::CSerialPort const *)arg1)->getReadBufferSize();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setDtr__SWIG_0(void * jarg1, unsigned int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  bool arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDtr(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setDtr__SWIG_1(void * jarg1) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  (arg1)->setDtr();
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setRts__SWIG_0(void * jarg1, unsigned int jarg2) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  bool arg2 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRts(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPort_setRts__SWIG_1(void * jarg1) {
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  (arg1)->setRts();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_itas109_CSerialPort_getVersion(void * jarg1) {
  char * jresult ;
  itas109::CSerialPort *arg1 = (itas109::CSerialPort *) 0 ;
  char *result = 0 ;
  
  arg1 = (itas109::CSerialPort *)jarg1; 
  result = (char *)(arg1)->getVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_delete_CSerialPortListener(void * jarg1) {
  itas109::CSerialPortListener *arg1 = (itas109::CSerialPortListener *) 0 ;
  
  arg1 = (itas109::CSerialPortListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPortListener_onReadEvent(void * jarg1, char * jarg2, unsigned int jarg3) {
  itas109::CSerialPortListener *arg1 = (itas109::CSerialPortListener *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (itas109::CSerialPortListener *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->onReadEvent((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_new_CSerialPortListener() {
  void * jresult ;
  itas109::CSerialPortListener *result = 0 ;
  
  result = (itas109::CSerialPortListener *)new SwigDirector_CSerialPortListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_CSerialPortListener_director_connect(void *objarg, SwigDirector_CSerialPortListener::SWIG_Callback0_t callback0) {
  itas109::CSerialPortListener *obj = (itas109::CSerialPortListener *)objarg;
  SwigDirector_CSerialPortListener *director = static_cast<SwigDirector_CSerialPortListener *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_new_CSerialPortInfo() {
  void * jresult ;
  itas109::CSerialPortInfo *result = 0 ;
  
  result = (itas109::CSerialPortInfo *)new itas109::CSerialPortInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_itas109_delete_CSerialPortInfo(void * jarg1) {
  itas109::CSerialPortInfo *arg1 = (itas109::CSerialPortInfo *) 0 ;
  
  arg1 = (itas109::CSerialPortInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_itas109_CSerialPortInfo_availablePortInfos() {
  void * jresult ;
  std::vector< itas109::SerialPortInfo > result;
  
  result = itas109::CSerialPortInfo::availablePortInfos();
  jresult = new std::vector< itas109::SerialPortInfo >(result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

